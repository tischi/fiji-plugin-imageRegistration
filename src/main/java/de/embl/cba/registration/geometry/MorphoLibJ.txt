	/**
	 * <p>
	 * Computes inertia ellipsoid of each 3D region in input 3D label image.
	 * </p>
	 *
	 * <p>
	 * The result is given as a ResultsTable with as many rows as the number of
	 * labels, and 9 columns. Columns correspond to the centroid coordinates (3
	 * values), the radius of the ellipsoid (3 values), and the orientation,
	 * given as azimut, elevation, and roll angles, in degrees (3 values).
	 *
	 * @param image
	 *            an instance of ImageStack containing region labels
	 * @param resol
	 *            the resolution of the image, in each direction
	 * @return the parameters of the inertia ellipsoid for each region
	 *
	 * @throws RuntimeException
	 *             if jama package is not found.
	 */
	public final static ResultsTable inertiaEllipsoid( ImageStack image, double[] resol)
	{

		// extract particle labels
		int[] labels = LabelImages.findAllLabels(image);
		int nLabels = labels.length;

		// Compute inertia ellipsoids data
		double[][] elli = inertiaEllipsoid(image, labels, resol);

		// Convert data array to ResultsTable object, with appropriate column names
		ResultsTable table = new ResultsTable();
		for (int i = 0; i < nLabels; i++)
		{
			table.incrementCounter();
			table.addLabel(Integer.toString(labels[i]));
			// add coordinates of origin pixel (IJ coordinate system)
			table.addValue("XCentroid", elli[i][0]);
			table.addValue("YCentroid", elli[i][1]);
			table.addValue("ZCentroid", elli[i][2]);
			// add scaling parameters
			table.addValue("Radius1", elli[i][3]);
			table.addValue("Radius2", elli[i][4]);
			table.addValue("Radius3", elli[i][5]);
			// add orientation info
			table.addValue("Phi", elli[i][6]);
			table.addValue("Theta", elli[i][7]);
			table.addValue("Psi", elli[i][8]);
		}


		return table;
	}



	public static ElliposidGeometry computeEllipsoidGeometry( Matrix matrix )
	{

		/*
		// Extract singular values
		SingularValueDecomposition svd = new SingularValueDecomposition(matrix);
		Matrix values = svd.getS();

		// convert singular values to ellipsoid radii
		double r1 = sqrt(5) * sqrt(values.get(0, 0));
		double r2 = sqrt(5) * sqrt(values.get(1, 1));
		double r3 = sqrt(5) * sqrt(values.get(2, 2));

		// extract |cos(theta)|
		Matrix mat = svd.getU();
		double tmp = hypot(mat.get(1, 1), mat.get(2, 1));
		double phi, theta, psi;

		// avoid dividing by 0
		if (tmp > 16 * Double.MIN_VALUE)
		{
			// normal case: theta <> 0
			psi     = atan2( mat.get(2, 1), mat.get(2, 2));
			theta   = atan2(-mat.get(2, 0), tmp);
			phi     = atan2( mat.get(1, 0), mat.get(0, 0));
		}
		else
		{
			// theta is around 0
			psi     = atan2(-mat.get(1, 2), mat.get(1,1));
			theta   = atan2(-mat.get(2, 0), tmp);
			phi     = 0;
		}

		// add coordinates of origin pixel (IJ coordinate system)
		res[i][0] = cx[i] + .5 * resol[0];
		res[i][1] = cy[i] + .5 * resol[1];
		res[i][2] = cz[i] + .5 * resol[2];
		// add scaling parameters
		res[i][3] = r1;
		res[i][4] = r2;
		res[i][5] = r3;
		// add orientation info
		res[i][6] = toDegrees(phi);
		res[i][7] = toDegrees(theta);
		res[i][8] = toDegrees(psi);

		*/

		return null;
	}


		/**
		 * <p>
		 * Computes inertia ellipsoid from input 3D label image for each specified
		 * region label.
		 * </p>
		 *
		 * <p>
		 * The result is given as an array of double with as many rows as the number
		 * of labels, and 9 columns. Columns correspond to the centroid coordinates
		 * (3 values), the radius of the ellipsoid (3 values), and the orientation,
		 * given as azimut, elevation, and roll angles, in degrees (3 values).
		 * </p>
		 *
		 * <pre><code>
		 * ImageStack labelImage = ...
		 * int[] labels = LabelImages.findAllLabels(image);
		 * double[] resol = new double[]{1, 1, 1};
		 * double[][] ellipsoids = GeometricMeasures3D.inertiaEllipsoid(labelImage,
		 * 		labels, resol);
		 * double[][] elongations = GeometricMeasures3D.computeEllipsoidElongations(ellipsoids);
		 * </code></pre>
		 *
		 * @param image
		 *            input image containing label of each particle
		 * @param labels
		 *            the list of labels for which we want to compute inertia
		 *            ellipsoid
		 * @param resol
		 *            the spatial resolution, as an array of length 3.
		 * @return an array with as many rows as the number of labels, and 9 columns
		 * @throws RuntimeException
		 *             if jama package is not found.
		 */
	public static final double[][] inertiaEllipsoid( ImageStack image,
													 int[] labels, double[] resol)
	{
		// Check validity of parameters
		if (image==null) return null;

		// check if JAMA package is present
		try
		{
			Class.forName("Jama.Matrix");
		}
		catch(Exception e)
		{
			throw new RuntimeException("Requires the JAMA package to work properly");
		}

		// size of image
		int sizeX = image.getWidth();
		int sizeY = image.getHeight();
		int sizeZ = image.getSize();

		// create associative array to know index of each label
		HashMap<Integer, Integer> labelIndices = LabelImages.mapLabelIndices(labels);

		// ensure valid resolution
		if (resol == null)
		{
			resol = new double[]{1, 1, 1};
		}

		// allocate memory for result
		int nLabels = labels.length;
		int[] counts = new int[nLabels];
		double[] cx = new double[nLabels];
		double[] cy = new double[nLabels];
		double[] cz = new double[nLabels];
		double[] Ixx = new double[nLabels];
		double[] Iyy = new double[nLabels];
		double[] Izz = new double[nLabels];
		double[] Ixy = new double[nLabels];
		double[] Ixz = new double[nLabels];
		double[] Iyz = new double[nLabels];

		// compute centroid of each region
		for (int z = 0; z < sizeZ; z++)
		{
			for (int y = 0; y < sizeY; y++)
			{
				for (int x = 0; x < sizeX; x++)
				{
					// do not process background voxels
					int label = (int) image.getVoxel(x, y, z);
					if (label == 0)
						continue;

					// convert label to its index
					int index = labelIndices.get(label);

					// update sum coordinates, taking into account the spatial calibration
					cx[index] += x * resol[0];
					cy[index] += y * resol[1];
					cz[index] += z * resol[2];
					counts[index]++;
				}
			}
		}

		// normalize by number of pixels in each region
		for (int i = 0; i < nLabels; i++)
		{
			cx[i] = cx[i] / counts[i];
			cy[i] = cy[i] / counts[i];
			cz[i] = cz[i] / counts[i];
		}

		// compute centered inertia matrix of each label
		for (int z = 0; z < sizeZ; z++)
		{
			for (int y = 0; y < sizeY; y++)
			{
				for (int x = 0; x < sizeX; x++)
				{
					// do not process background voxels
					int label = (int) image.getVoxel(x, y, z);
					if (label == 0)
						continue;

					// convert label to its index
					int index = labelIndices.get(label);

					// convert coordinates relative to centroid
					double x2 = x * resol[0] - cx[index];
					double y2 = y * resol[1] - cy[index];
					double z2 = z * resol[2] - cz[index];

					// update coefficients of inertia matrix
					Ixx[index] += x2 * x2;
					Iyy[index] += y2 * y2;
					Izz[index] += z2 * z2;
					Ixy[index] += x2 * y2;
					Ixz[index] += x2 * z2;
					Iyz[index] += y2 * z2;
				}
			}
		}

		// normalize by number of pixels in each region
		for (int i = 0; i < nLabels; i++)
		{
			Ixx[i] = Ixx[i] / counts[i];
			Iyy[i] = Iyy[i] / counts[i];
			Izz[i] = Izz[i] / counts[i];
			Ixy[i] = Ixy[i] / counts[i];
			Ixz[i] = Ixz[i] / counts[i];
			Iyz[i] = Iyz[i] / counts[i];
		}

		// Create result array
		double[][] res = new double[nLabels][9];

		// compute ellipsoid parameters for each region
		Matrix matrix = new Matrix(3, 3);
		for (int i = 0; i < nLabels; i++)
		{
			// fill up the 3x3 inertia matrix
			matrix.set(0, 0, Ixx[i]);
			matrix.set(0, 1, Ixy[i]);
			matrix.set(0, 2, Ixz[i]);
			matrix.set(1, 0, Ixy[i]);
			matrix.set(1, 1, Iyy[i]);
			matrix.set(1, 2, Iyz[i]);
			matrix.set(2, 0, Ixz[i]);
			matrix.set(2, 1, Iyz[i]);
			matrix.set(2, 2, Izz[i]);

			// Extract singular values
			SingularValueDecomposition svd = new SingularValueDecomposition(matrix);
			Matrix values = svd.getS();

			// convert singular values to ellipsoid radii
			double r1 = sqrt(5) * sqrt(values.get(0, 0));
			double r2 = sqrt(5) * sqrt(values.get(1, 1));
			double r3 = sqrt(5) * sqrt(values.get(2, 2));

			// extract |cos(theta)|
			Matrix mat = svd.getU();
			double tmp = hypot(mat.get(1, 1), mat.get(2, 1));
			double phi, theta, psi;

			// avoid dividing by 0
			if (tmp > 16 * Double.MIN_VALUE)
			{
				// normal case: theta <> 0
				psi     = atan2( mat.get(2, 1), mat.get(2, 2));
				theta   = atan2(-mat.get(2, 0), tmp);
				phi     = atan2( mat.get(1, 0), mat.get(0, 0));
			}
			else
			{
				// theta is around 0
				psi     = atan2(-mat.get(1, 2), mat.get(1,1));
				theta   = atan2(-mat.get(2, 0), tmp);
				phi     = 0;
			}

			// add coordinates of origin pixel (IJ coordinate system)
			res[i][0] = cx[i] + .5 * resol[0];
			res[i][1] = cy[i] + .5 * resol[1];
			res[i][2] = cz[i] + .5 * resol[2];
			// add scaling parameters
			res[i][3] = r1;
			res[i][4] = r2;
			res[i][5] = r3;
			// add orientation info
			res[i][6] = toDegrees(phi);
			res[i][7] = toDegrees(theta);
			res[i][8] = toDegrees(psi);
		}

		return res;
	}