
THRESHOLD


    //ArrayImg< BitType, LongArray > output = ArrayImgs
    //        .bits( Intervals.dimensionsAsLongArray( input ) );

    // TODO: is below line of code necessary? it copies it to RAM, doesn't it?
    //for ( Pair< BitType, BitType > p : Views.interval( Views.pair( Views.zeroMin( convertedView ), output ), output ) )
    //    p.getB().set( p.getA() );

        /*
        ArrayCursor< BitType > target = output.cursor();
        Cursor< BitType > src = Views.flatIterable( converted ).cursor();
        while( target.hasNext() )
            target.next().set( src.next() );
        */

        //            IJ.run("Image Sequence...",
        //                    "open=/Users/tischi/Documents/fiji-plugin-imageRegistration--data/mri-stack-16bit sort use");
        //            ImagePlus imp = IJ.getImage(); n = 3;

                    // convert of cellImg that is lazily loaded
                    //
        //            Img< UnsignedShortType > img = ConvertVirtualStackToCellImg.getCellImgUnsignedShort( imp );
        //            ImgPlus< UnsignedShortType > imgp = new ImgPlus<>( img, "title", new AxisType[]{ Axes.X, Axes.Y, Axes.Z } );
        ////            ij.get(LegacyService.class).getImageMap().addMapping(  ); // but it's private...
        //            //imp.hide(); ImageJFunctions.show( img );
                   // ij.convert().convert( RAI, Img.class )


                   //TransformationType.values();

                           /*

                           //
                           // Enter inputRAI processing code here ...
                           // The following is just a Gauss filtering example
                           //
                           final double[] sigmas = {1.0, 3.0, 5.0};

                           List<RandomAccessibleInterval<T>> results = new ArrayList<>();

                           for (double sigma : sigmas) {
                               results.add(opService.filter().gauss(inputRAI, sigma));
                           }

                           // display result
                           for (RandomAccessibleInterval<T> elem : results) {
                               uiService.show(elem);
                           }
                           */